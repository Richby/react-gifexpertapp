{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OAEI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAOlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SArBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,a,+BCNjBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEdC,EAFc,iDAEmCC,UAAWH,GAF9C,+DAIFI,MAAOF,GAJL,cAIdG,EAJc,gBAKAA,EAAKC,OALL,uBAKbC,EALa,EAKbA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAE1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZtB,kBAgBbM,GAhBa,4CAAH,sDCDRO,EAAc,SAAC,GAA0B,IAAvBJ,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAItC,OAFAc,QAAQC,IAAKN,EAAIC,EAAOV,GAGpB,qBAAKgB,UAAU,yCAAf,SACI,+BACI,qBAAKC,IAAMjB,EAAMkB,IAAMR,IACvB,kCAAMA,EAAN,aCLHS,EAAU,SAAC,GAAiB,IAAfrB,EAAc,EAAdA,SAItB,ECJwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAK,GACLe,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KA0BA,OArBAC,qBAAU,WAEN1B,EAASC,GACJ0B,MAAM,SAAAC,GAEHH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAKtB,CAAEtB,IASEuB,EDxB0BK,CAAc5B,GAAlCa,EAAb,EAAQN,KAAae,EAArB,EAAqBA,QAMrB,OAEI,qCACI,qBAAIJ,UAAU,kCAAd,cAAmDlB,EAAnD,OAECsB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEZ,qBAAKA,UAAU,YAAf,SAGQL,EAAOJ,KAAK,SAAAC,GAAG,OACP,cAAC,EAAD,eAESA,GADCA,EAAIC,aErB7BkB,EAAe,WAGxB,MAAoC3C,mBAAS,CAAC,gBAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAOA,OACI,qCACI,+CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAIA,6BAEQ6C,EAAWrB,KAAK,SAAAT,GAAQ,OAEpB,aADA,CACC,EAAD,CAEIA,SAAWA,GADJA,Y,MCxBnC+B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e86d0114.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n    \n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) =>{\n        //console.log(e.target.value);\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if ( inputValue.trim().length > 2){\n            setCategories(cats => [inputValue, ...cats] );\n            setInputValue('');\n        }  \n        \n    }\n\n    return (\n    \n        <form onSubmit= {handleSubmit }>\n            <input\n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n                //onChange={ (e) => console.log(e)}\n            />\n        </form>\n\n    \n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","\n\n\n export const getGifs = async( category )=> {\n        \n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category )}&limit=10&api_key=NqlNHZFWGgJJBcYdbuuuI734cPl20Rp3`;\n    \n    const resp= await fetch( url );\n    const {data}= await resp.json(); // es necesario hacer la desestructuraciÃ³n de la data para no poner data.data.map()\n\n    const gifs = data.map( img => { // Esta parte marca error\n    //const gifs = data.data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n    \n    return gifs;\n \n}","import React from 'react'\n\nexport const GifGridItem = ( { id, title, url } ) => {\n\n    console.log( id, title, url );\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <li>\n                <img src={ url } alt={ title } />\n                <p> { title } </p>\n            </li>\n        </div>\n    )\n}\n","import React/*, { useState, useEffect }*/ from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n//import { getGifs } from '../helpers/getGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ( {category}) => {\n    \n\n    \n    const { data:images, loading } = useFetchGifs( category );\n\n    //console.log(data);\n   \n    \n\n    return (\n\n        <>\n            <h3 className=\"animate_animated animate_fadeIn\"> { category } </h3>\n\n            {loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\n\n            <div className=\"card-grid\">\n                \n                {\n                    images.map( img => (\n                            <GifGridItem \n                                key={ img.id }\n                                { ...img } //Esto envia las propiedades de la imagen por separado\n                            />\n                        ))\n                }\n                \n            </div>        \n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n\n\nexport const useFetchGifs = ( category )=> {\n\n    const [state, setState] = useState({\n        data:[],\n        loading: true\n    });\n\n    useEffect(()=>{\n\n        getGifs( category )\n            .then( imgs => {\n                                            \n                setState({\n                    data: imgs,\n                    loading: false\n                });            \n        \n            })\n\n    }, [ category]);\n\n   /*  setTimeout(() => {\n        setState({\n            data: [1,2,3,4,5],\n            loading: false\n        })\n    }, 3000); */\n\n    return state; // { data: [], loading: true}\n\n}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n\n\nexport const GifExpertApp = () => {\n\n\n    const [categories, setCategories] = useState(['Dragon Ball']);\n\n/*     //const handleAdd = () => setCategories(currentCategories => currentCategories.concat('Bob Esponja')); //Opcion1 usando concat\n    //const handleAdd = () => setCategories(categories.concat('Bob Esponja')); //Opcion2 usando concat\n    const handleAdd = () => setCategories([...categories, 'Bob Esponja']); //Opcion 3 usando operador spread */\n    \n\n    return (\n        <>\n            <h2>GiftExpertApp</h2>\n            <AddCategory setCategories= { setCategories }/>\n            <hr /> \n\n           \n\n            <ol>\n                {\n                    categories.map( category => \n                        //return <li key={ category }> {category} </li>\n                        <GifGrid \n                            key= { category }\n                            category={ category}\n                        />\n                    )\n                }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}